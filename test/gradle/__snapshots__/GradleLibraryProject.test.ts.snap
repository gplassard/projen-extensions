// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GradleLibraryProject synthesizes 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

* text=auto eol=lf",
  ".github/workflows/build.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: Java CI
on:
  push:
    branches: main
  pull_request:
    types:
      - opened
      - edited
      - synchronize
      - reopened
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      FOO: BAR
      CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL }}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: temurin
          cache: gradle
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::\${{ secrets.AWS_ACCOUNT_ID }}:role/\${{ secrets.CODE_ARTIFACT_READ_ROLE }}
          aws-region: us-east-1
      - name: Generate code artifact token
        id: code-artifact-token
        run: |-
          the_secret=$(aws codeartifact get-authorization-token --domain \${{ secrets.CODE_ARTIFACT_DOMAIN }} --domain-owner \${{ secrets.AWS_ACCOUNT_ID }} --region eu-west-1 --query authorizationToken --output text --duration-seconds 900)
          echo "::add-mask::$the_secret"
          echo "token=$the_secret" >> "$GITHUB_OUTPUT"
      - name: Build
        run: ./gradlew build -x integrationTest
        env:
          CODEARTIFACT_AUTH_TOKEN: \${{ steps.code-artifact-token.outputs.token }}
          CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL }}
",
  ".github/workflows/projen-synth.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: Projen-Synth
on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - edited
      - synchronize
      - reopened
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    outputs:
      self_mutation_happened: \${{ steps.self_mutation.outputs.self_mutation_happened }}
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.10.0
      - uses: actions/setup-node@v4
        with:
          node-version: 22.15.0
          registry-url: https://npm.pkg.github.com
          cache: pnpm
      - name: Install dependencies
        env:
          NODE_AUTH_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        run: pnpm i --frozen-lockfile
      - name: Run projen
        run: pnpm run projen
      - name: Find mutations
        id: self_mutation
        run: |-
          git add .
          git diff --staged --patch --exit-code > repo.patch || echo "self_mutation_happened=true" >> $GITHUB_OUTPUT
        working-directory: ./
      - name: Upload patch
        if: steps.self_mutation.outputs.self_mutation_happened
        uses: actions/upload-artifact@v4.4.0
        with:
          name: repo.patch
          path: repo.patch
          overwrite: true
      - name: Fail build on mutation
        if: steps.self_mutation.outputs.self_mutation_happened
        run: |-
          echo "::error::Files were changed during build (see build log). If this was triggered from a fork, you will need to update your branch."
          cat .repo.patch
          exit 1
  self-mutation:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: always() && needs.build.outputs.self_mutation_happened && !(github.event.pull_request.head.repo.full_name != github.repository)
    steps:
      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@3ff1caaa28b64c9cc276ce0a02e2ff584f3900c5
        with:
          app-id: \${{ secrets.PROJEN_APP_ID }}
          private-key: \${{ secrets.PROJEN_APP_PRIVATE_KEY }}
          permission-pull-requests: write
          permission-contents: write
          permission-workflows: write
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: \${{ steps.generate_token.outputs.token }}
          ref: \${{ github.event.pull_request.head.ref }}
          repository: \${{ github.event.pull_request.head.repo.full_name }}
      - name: Download patch
        uses: actions/download-artifact@v4
        with:
          name: repo.patch
          path: \${{ runner.temp }}
      - name: Apply patch
        run: '[ -s \${{ runner.temp }}/repo.patch ] && git apply \${{ runner.temp }}/repo.patch || echo "Empty patch. Skipping."'
      - name: Set git identity
        run: |-
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: Push changes
        env:
          PULL_REQUEST_REF: \${{ github.event.pull_request.head.ref }}
        run: |-
          git add .
          git commit -s -m "chore: self mutation"
          git push origin HEAD:$PULL_REQUEST_REF
",
  ".github/workflows/pull-request-lint.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: pull-request-lint
on:
  pull_request_target:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - edited
  merge_group: {}
jobs:
  validate:
    name: Validate PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: (github.event_name == 'pull_request' || github.event_name == 'pull_request_target')
    steps:
      - uses: amannn/action-semantic-pull-request@v5.4.0
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          types: |-
            feat
            fix
            chore
            refactor
            build
            docs
            ci
            perf
            style
            test
          requireScope: true
",
  ".github/workflows/release-my-awesome-library.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: Java release my-awesome-library
on:
  push:
    tags:
      - v*
jobs:
  publish-github:
    runs-on: ubuntu-latest
    env:
      CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL }}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: temurin
          cache: gradle
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::\${{ secrets.AWS_ACCOUNT_ID }}:role/\${{ secrets.CODE_ARTIFACT_READ_ROLE }}
          aws-region: us-east-1
      - name: Generate code artifact token
        id: code-artifact-token
        run: |-
          the_secret=$(aws codeartifact get-authorization-token --domain \${{ secrets.CODE_ARTIFACT_DOMAIN }} --domain-owner \${{ secrets.AWS_ACCOUNT_ID }} --region eu-west-1 --query authorizationToken --output text --duration-seconds 900)
          echo "::add-mask::$the_secret"
          echo "token=$the_secret" >> "$GITHUB_OUTPUT"
      - name: Build
        run: ./gradlew build -x integrationTest
        env:
          CODEARTIFACT_AUTH_TOKEN: \${{ steps.code-artifact-token.outputs.token }}
          CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL }}
      - name: Publish package
        run: ./gradlew publishAllPublicationsToGithubPackagesRepository
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
  publish-code-artifact:
    runs-on: ubuntu-latest
    env:
      CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL }}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: temurin
          cache: gradle
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::\${{ secrets.AWS_ACCOUNT_ID }}:role/\${{ secrets.CODE_ARTIFACT_WRITE_ROLE }}
          aws-region: us-east-1
      - name: Generate code artifact token
        id: code-artifact-token
        run: |-
          the_secret=$(aws codeartifact get-authorization-token --domain \${{ secrets.CODE_ARTIFACT_DOMAIN }} --domain-owner \${{ secrets.AWS_ACCOUNT_ID }} --region eu-west-1 --query authorizationToken --output text --duration-seconds 900)
          echo "::add-mask::$the_secret"
          echo "token=$the_secret" >> "$GITHUB_OUTPUT"
      - name: Build
        run: ./gradlew build -x integrationTest
        env:
          CODEARTIFACT_AUTH_TOKEN: \${{ steps.code-artifact-token.outputs.token }}
          CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL }}
      - name: Publish package
        run: ./gradlew publishAllPublicationsToCodeArtifactRepository
        env:
          CODEARTIFACT_AUTH_TOKEN: \${{ steps.code-artifact-token.outputs.token }}
",
  ".github/workflows/upgrade-nodejs-dependencies.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: Upgrade-NodeJS-dependencies
on:
  workflow_dispatch: {}
  schedule:
    - cron: 0 0 3 * *
jobs:
  upgrade:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    outputs:
      patch_created: \${{ steps.create_patch.outputs.patch_created }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.10.0
      - uses: actions/setup-node@v4
        with:
          node-version: 22.15.0
          registry-url: https://npm.pkg.github.com
          cache: pnpm
      - name: Install dependencies
        env:
          NODE_AUTH_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        run: pnpm i --frozen-lockfile
      - name: Upgrade dependencies
        env:
          NODE_AUTH_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        run: pnpm dlx npm-check-updates@16 --upgrade --target=latest
      - name: Install dependencies
        env:
          NODE_AUTH_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        run: pnpm i --no-frozen-lockfile
      - name: Run projen
        run: pnpm run projen
      - name: Find mutations
        id: create_patch
        run: |-
          git add .
          git diff --staged --patch --exit-code > repo.patch || echo "patch_created=true" >> $GITHUB_OUTPUT
        working-directory: ./
      - name: Upload patch
        if: steps.create_patch.outputs.patch_created
        uses: actions/upload-artifact@v4.4.0
        with:
          name: repo.patch
          path: repo.patch
          overwrite: true
  pr:
    name: Create Pull Request
    needs: upgrade
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: \${{ needs.upgrade.outputs.patch_created }}
    steps:
      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@3ff1caaa28b64c9cc276ce0a02e2ff584f3900c5
        with:
          app-id: \${{ secrets.PROJEN_APP_ID }}
          private-key: \${{ secrets.PROJEN_APP_PRIVATE_KEY }}
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download patch
        uses: actions/download-artifact@v4
        with:
          name: repo.patch
          path: \${{ runner.temp }}
      - name: Apply patch
        run: '[ -s \${{ runner.temp }}/repo.patch ] && git apply \${{ runner.temp }}/repo.patch || echo "Empty patch. Skipping."'
      - name: Set git identity
        run: |-
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: \${{ steps.generate_token.outputs.token }}
          commit-message: |-
            chore(deps): upgrade dependencies

            Upgrades project dependencies. See details in [workflow run].

            [Workflow Run]: \${{ github.server_url }}/\${{ github.repository }}/actions/runs/\${{ github.run_id }}

            ------

            *Automatically created by projen via the "upgrade-nodejs-dependencies" workflow*
          branch: github-actions/upgrade-nodejs-dependencies
          title: "chore(deps): upgrade dependencies"
          labels: dependencies
          body: |-
            Upgrades project dependencies. See details in [workflow run].

            [Workflow Run]: \${{ github.server_url }}/\${{ github.repository }}/actions/runs/\${{ github.run_id }}

            ------

            *Automatically created by projen via the "upgrade-nodejs-dependencies" workflow*
          author: github-actions <github-actions@github.com>
          committer: github-actions <github-actions@github.com>
          signoff: true
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
.idea
*.iml
.vscode
.DS_Store
.gradle
build
!/.github/workflows/pull-request-lint.yml
!/.github/workflows/release-my-awesome-library.yml
!/.github/workflows/build.yml
!/.github/workflows/upgrade-nodejs-dependencies.yml
!/.github/workflows/projen-synth.yml
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".github/workflows/build.yml",
      ".github/workflows/projen-synth.yml",
      ".github/workflows/pull-request-lint.yml",
      ".github/workflows/release-my-awesome-library.yml",
      ".github/workflows/upgrade-nodejs-dependencies.yml",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
}
`;

exports[`GradleLibraryProject synthesizes with subprojects 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

* text=auto eol=lf",
  ".github/workflows/build.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: Java CI
on:
  push:
    branches: main
  pull_request:
    types:
      - opened
      - edited
      - synchronize
      - reopened
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    env: {}
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: temurin
          cache: gradle
      - name: Build
        run: ./gradlew build
",
  ".github/workflows/projen-synth.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: Projen-Synth
on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - edited
      - synchronize
      - reopened
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    outputs:
      self_mutation_happened: \${{ steps.self_mutation.outputs.self_mutation_happened }}
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.10.0
      - uses: actions/setup-node@v4
        with:
          node-version: 22.15.0
          registry-url: https://npm.pkg.github.com
          cache: pnpm
      - name: Install dependencies
        env:
          NODE_AUTH_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        run: pnpm i --frozen-lockfile
      - name: Run projen
        run: pnpm run projen
      - name: Find mutations
        id: self_mutation
        run: |-
          git add .
          git diff --staged --patch --exit-code > repo.patch || echo "self_mutation_happened=true" >> $GITHUB_OUTPUT
        working-directory: ./
      - name: Upload patch
        if: steps.self_mutation.outputs.self_mutation_happened
        uses: actions/upload-artifact@v4.4.0
        with:
          name: repo.patch
          path: repo.patch
          overwrite: true
      - name: Fail build on mutation
        if: steps.self_mutation.outputs.self_mutation_happened
        run: |-
          echo "::error::Files were changed during build (see build log). If this was triggered from a fork, you will need to update your branch."
          cat .repo.patch
          exit 1
  self-mutation:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: always() && needs.build.outputs.self_mutation_happened && !(github.event.pull_request.head.repo.full_name != github.repository)
    steps:
      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@3ff1caaa28b64c9cc276ce0a02e2ff584f3900c5
        with:
          app-id: \${{ secrets.PROJEN_APP_ID }}
          private-key: \${{ secrets.PROJEN_APP_PRIVATE_KEY }}
          permission-pull-requests: write
          permission-contents: write
          permission-workflows: write
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: \${{ steps.generate_token.outputs.token }}
          ref: \${{ github.event.pull_request.head.ref }}
          repository: \${{ github.event.pull_request.head.repo.full_name }}
      - name: Download patch
        uses: actions/download-artifact@v4
        with:
          name: repo.patch
          path: \${{ runner.temp }}
      - name: Apply patch
        run: '[ -s \${{ runner.temp }}/repo.patch ] && git apply \${{ runner.temp }}/repo.patch || echo "Empty patch. Skipping."'
      - name: Set git identity
        run: |-
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: Push changes
        env:
          PULL_REQUEST_REF: \${{ github.event.pull_request.head.ref }}
        run: |-
          git add .
          git commit -s -m "chore: self mutation"
          git push origin HEAD:$PULL_REQUEST_REF
",
  ".github/workflows/pull-request-lint.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: pull-request-lint
on:
  pull_request_target:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - edited
  merge_group: {}
jobs:
  validate:
    name: Validate PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: (github.event_name == 'pull_request' || github.event_name == 'pull_request_target')
    steps:
      - uses: amannn/action-semantic-pull-request@v5.4.0
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          types: |-
            feat
            fix
            chore
            refactor
            build
            docs
            ci
            perf
            style
            test
          requireScope: true
",
  ".github/workflows/release-sub-project-one.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: Java release sub-project-one
on:
  push:
    tags:
      - sub-project-one-*
jobs:
  publish-github:
    runs-on: ubuntu-latest
    env:
      CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL }}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: temurin
          cache: gradle
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::\${{ secrets.AWS_ACCOUNT_ID }}:role/\${{ secrets.CODE_ARTIFACT_READ_ROLE }}
          aws-region: us-east-1
      - name: Generate code artifact token
        id: code-artifact-token
        run: |-
          the_secret=$(aws codeartifact get-authorization-token --domain \${{ secrets.CODE_ARTIFACT_DOMAIN }} --domain-owner \${{ secrets.AWS_ACCOUNT_ID }} --region eu-west-1 --query authorizationToken --output text --duration-seconds 900)
          echo "::add-mask::$the_secret"
          echo "token=$the_secret" >> "$GITHUB_OUTPUT"
      - name: Build
        run: ./gradlew build -x integrationTest
        env:
          CODEARTIFACT_AUTH_TOKEN: \${{ steps.code-artifact-token.outputs.token }}
          CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL }}
      - name: Publish package
        run: ./gradlew :sub-project-one:publishAllPublicationsToGithubPackagesRepository
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
  publish-code-artifact:
    runs-on: ubuntu-latest
    env:
      CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL }}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: temurin
          cache: gradle
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::\${{ secrets.AWS_ACCOUNT_ID }}:role/\${{ secrets.CODE_ARTIFACT_WRITE_ROLE }}
          aws-region: us-east-1
      - name: Generate code artifact token
        id: code-artifact-token
        run: |-
          the_secret=$(aws codeartifact get-authorization-token --domain \${{ secrets.CODE_ARTIFACT_DOMAIN }} --domain-owner \${{ secrets.AWS_ACCOUNT_ID }} --region eu-west-1 --query authorizationToken --output text --duration-seconds 900)
          echo "::add-mask::$the_secret"
          echo "token=$the_secret" >> "$GITHUB_OUTPUT"
      - name: Build
        run: ./gradlew build -x integrationTest
        env:
          CODEARTIFACT_AUTH_TOKEN: \${{ steps.code-artifact-token.outputs.token }}
          CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL }}
      - name: Publish package
        run: ./gradlew :sub-project-one:publishAllPublicationsToCodeArtifactRepository
        env:
          CODEARTIFACT_AUTH_TOKEN: \${{ steps.code-artifact-token.outputs.token }}
",
  ".github/workflows/release-sub-project-two.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: Java release sub-project-two
on:
  push:
    tags:
      - sub-project-two-*
jobs:
  publish-github:
    runs-on: ubuntu-latest
    env:
      CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL }}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: temurin
          cache: gradle
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::\${{ secrets.AWS_ACCOUNT_ID }}:role/\${{ secrets.CODE_ARTIFACT_READ_ROLE }}
          aws-region: us-east-1
      - name: Generate code artifact token
        id: code-artifact-token
        run: |-
          the_secret=$(aws codeartifact get-authorization-token --domain \${{ secrets.CODE_ARTIFACT_DOMAIN }} --domain-owner \${{ secrets.AWS_ACCOUNT_ID }} --region eu-west-1 --query authorizationToken --output text --duration-seconds 900)
          echo "::add-mask::$the_secret"
          echo "token=$the_secret" >> "$GITHUB_OUTPUT"
      - name: Build
        run: ./gradlew build -x integrationTest
        env:
          CODEARTIFACT_AUTH_TOKEN: \${{ steps.code-artifact-token.outputs.token }}
          CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL }}
      - name: Publish package
        run: ./gradlew :sub-project-two:publishAllPublicationsToGithubPackagesRepository
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
  publish-code-artifact:
    runs-on: ubuntu-latest
    env:
      CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL }}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: temurin
          cache: gradle
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::\${{ secrets.AWS_ACCOUNT_ID }}:role/\${{ secrets.CODE_ARTIFACT_WRITE_ROLE }}
          aws-region: us-east-1
      - name: Generate code artifact token
        id: code-artifact-token
        run: |-
          the_secret=$(aws codeartifact get-authorization-token --domain \${{ secrets.CODE_ARTIFACT_DOMAIN }} --domain-owner \${{ secrets.AWS_ACCOUNT_ID }} --region eu-west-1 --query authorizationToken --output text --duration-seconds 900)
          echo "::add-mask::$the_secret"
          echo "token=$the_secret" >> "$GITHUB_OUTPUT"
      - name: Build
        run: ./gradlew build -x integrationTest
        env:
          CODEARTIFACT_AUTH_TOKEN: \${{ steps.code-artifact-token.outputs.token }}
          CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL }}
      - name: Publish package
        run: ./gradlew :sub-project-two:publishAllPublicationsToCodeArtifactRepository
        env:
          CODEARTIFACT_AUTH_TOKEN: \${{ steps.code-artifact-token.outputs.token }}
",
  ".github/workflows/upgrade-nodejs-dependencies.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: Upgrade-NodeJS-dependencies
on:
  workflow_dispatch: {}
  schedule:
    - cron: 0 0 3 * *
jobs:
  upgrade:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    outputs:
      patch_created: \${{ steps.create_patch.outputs.patch_created }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.10.0
      - uses: actions/setup-node@v4
        with:
          node-version: 22.15.0
          registry-url: https://npm.pkg.github.com
          cache: pnpm
      - name: Install dependencies
        env:
          NODE_AUTH_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        run: pnpm i --frozen-lockfile
      - name: Upgrade dependencies
        env:
          NODE_AUTH_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        run: pnpm dlx npm-check-updates@16 --upgrade --target=latest
      - name: Install dependencies
        env:
          NODE_AUTH_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        run: pnpm i --no-frozen-lockfile
      - name: Run projen
        run: pnpm run projen
      - name: Find mutations
        id: create_patch
        run: |-
          git add .
          git diff --staged --patch --exit-code > repo.patch || echo "patch_created=true" >> $GITHUB_OUTPUT
        working-directory: ./
      - name: Upload patch
        if: steps.create_patch.outputs.patch_created
        uses: actions/upload-artifact@v4.4.0
        with:
          name: repo.patch
          path: repo.patch
          overwrite: true
  pr:
    name: Create Pull Request
    needs: upgrade
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: \${{ needs.upgrade.outputs.patch_created }}
    steps:
      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@3ff1caaa28b64c9cc276ce0a02e2ff584f3900c5
        with:
          app-id: \${{ secrets.PROJEN_APP_ID }}
          private-key: \${{ secrets.PROJEN_APP_PRIVATE_KEY }}
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download patch
        uses: actions/download-artifact@v4
        with:
          name: repo.patch
          path: \${{ runner.temp }}
      - name: Apply patch
        run: '[ -s \${{ runner.temp }}/repo.patch ] && git apply \${{ runner.temp }}/repo.patch || echo "Empty patch. Skipping."'
      - name: Set git identity
        run: |-
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: \${{ steps.generate_token.outputs.token }}
          commit-message: |-
            chore(deps): upgrade dependencies

            Upgrades project dependencies. See details in [workflow run].

            [Workflow Run]: \${{ github.server_url }}/\${{ github.repository }}/actions/runs/\${{ github.run_id }}

            ------

            *Automatically created by projen via the "upgrade-nodejs-dependencies" workflow*
          branch: github-actions/upgrade-nodejs-dependencies
          title: "chore(deps): upgrade dependencies"
          labels: dependencies
          body: |-
            Upgrades project dependencies. See details in [workflow run].

            [Workflow Run]: \${{ github.server_url }}/\${{ github.repository }}/actions/runs/\${{ github.run_id }}

            ------

            *Automatically created by projen via the "upgrade-nodejs-dependencies" workflow*
          author: github-actions <github-actions@github.com>
          committer: github-actions <github-actions@github.com>
          signoff: true
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
.idea
*.iml
.vscode
.DS_Store
.gradle
build
!/.github/workflows/pull-request-lint.yml
!/.github/workflows/build.yml
!/.github/workflows/upgrade-nodejs-dependencies.yml
!/.github/workflows/projen-synth.yml
!/.github/workflows/release-sub-project-one.yml
!/.github/workflows/release-sub-project-two.yml
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".github/workflows/build.yml",
      ".github/workflows/projen-synth.yml",
      ".github/workflows/pull-request-lint.yml",
      ".github/workflows/release-sub-project-one.yml",
      ".github/workflows/release-sub-project-two.yml",
      ".github/workflows/upgrade-nodejs-dependencies.yml",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
}
`;
