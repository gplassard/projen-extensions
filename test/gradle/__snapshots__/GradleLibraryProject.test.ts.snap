// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GradleLibraryProject synthesizes 1`] = `
{
  ".github/workflows/build.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: Java CI
on:
  push:
    branches: main
  pull_request: {}
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL}}
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: temurin
          cache: gradle
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::\${{ secrets.AWS_ACCOUNT_ID }}:role/\${{ secrets.CODE_ARTIFACT_READ_ROLE }}
          aws-region: us-east-1
      - name: Generate code artifact token
        id: code-artifact-token
        run: "

          \\   the_secret=$(aws codeartifact get-authorization-token --domain \${{ secrets.CODE_ARTIFACT_DOMAIN }} --domain-owner \${{ secrets.AWS_ACCOUNT_ID }} --region eu-west-1 --query authorizationToken --output text --duration-seconds 900)

          \\   echo \\"::add-mask::$the_secret\\"

          \\   echo \\"token=$the_secret\\" >> \\"$GITHUB_OUTPUT\\"

          \\ "
      - name: Build
        run: ./gradlew build -x integrationTest
        env:
          CODEARTIFACT_AUTH_TOKEN: \${{ steps.code-artifact-token.outputs.token }}
          CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL }}
",
  ".github/workflows/pull-request-lint.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: pull-request-lint
on:
  pull_request_target:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - edited
jobs:
  validate:
    name: Validate PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: amannn/action-semantic-pull-request@v5.4.0
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          types: |-
            feat
            fix
            chore
            refactor
            build
            docs
            ci
            perf
            style
            test
          requireScope: true
",
  ".github/workflows/release-my-awesome-library.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: Java release my-awesome-library
on:
  push:
    tags:
      - v*
jobs:
  publish-github:
    runs-on: ubuntu-latest
    env:
      CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL}}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: temurin
          cache: gradle
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::\${{ secrets.AWS_ACCOUNT_ID }}:role/\${{ secrets.CODE_ARTIFACT_READ_ROLE }}
          aws-region: us-east-1
      - name: Generate code artifact token
        id: code-artifact-token
        run: "

          \\   the_secret=$(aws codeartifact get-authorization-token --domain \${{ secrets.CODE_ARTIFACT_DOMAIN }} --domain-owner \${{ secrets.AWS_ACCOUNT_ID }} --region eu-west-1 --query authorizationToken --output text --duration-seconds 900)

          \\   echo \\"::add-mask::$the_secret\\"

          \\   echo \\"token=$the_secret\\" >> \\"$GITHUB_OUTPUT\\"

          \\ "
      - name: Build
        run: ./gradlew build -x integrationTest
        env:
          CODEARTIFACT_AUTH_TOKEN: \${{ steps.code-artifact-token.outputs.token }}
          CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL }}
      - - name: Publish package
          run: ./gradlew publishAllPublicationsToGithubPackagesRepository
          env:
            GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
  publish-codeArtifact:
    runs-on: ubuntu-latest
    env:
      CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL}}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: temurin
          cache: gradle
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::\${{ secrets.AWS_ACCOUNT_ID }}:role/\${{ secrets.CODE_ARTIFACT_WRITE_ROLE }}
          aws-region: us-east-1
      - name: Generate code artifact token
        id: code-artifact-token
        run: "

          \\   the_secret=$(aws codeartifact get-authorization-token --domain \${{ secrets.CODE_ARTIFACT_DOMAIN }} --domain-owner \${{ secrets.AWS_ACCOUNT_ID }} --region eu-west-1 --query authorizationToken --output text --duration-seconds 900)

          \\   echo \\"::add-mask::$the_secret\\"

          \\   echo \\"token=$the_secret\\" >> \\"$GITHUB_OUTPUT\\"

          \\ "
      - name: Build
        run: ./gradlew build -x integrationTest
        env:
          CODEARTIFACT_AUTH_TOKEN: \${{ steps.code-artifact-token.outputs.token }}
          CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL }}
      - - name: Publish package
          run: ./gradlew publishAllPublicationsToCodeArtifactRepository
          env:
            CODEARTIFACT_AUTH_TOKEN: \${{ steps.code-artifact-token.outputs.token }}
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.github/workflows/pull-request-lint.yml
!/.github/workflows/release-my-awesome-library.yml
!/.github/workflows/build.yml
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".github/workflows/build.yml",
      ".github/workflows/pull-request-lint.yml",
      ".github/workflows/release-my-awesome-library.yml",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
}
`;

exports[`GradleLibraryProject synthesizes with subprojects 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "sub-project-one/.github/workflows/release-sub-project-one.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: Java release sub-project-one
on:
  push:
    tags:
      - sub-project-one-*
jobs:
  publish-github:
    runs-on: ubuntu-latest
    env:
      CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL}}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: temurin
          cache: gradle
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::\${{ secrets.AWS_ACCOUNT_ID }}:role/\${{ secrets.CODE_ARTIFACT_READ_ROLE }}
          aws-region: us-east-1
      - name: Generate code artifact token
        id: code-artifact-token
        run: "

          \\   the_secret=$(aws codeartifact get-authorization-token --domain \${{ secrets.CODE_ARTIFACT_DOMAIN }} --domain-owner \${{ secrets.AWS_ACCOUNT_ID }} --region eu-west-1 --query authorizationToken --output text --duration-seconds 900)

          \\   echo \\"::add-mask::$the_secret\\"

          \\   echo \\"token=$the_secret\\" >> \\"$GITHUB_OUTPUT\\"

          \\ "
      - name: Build
        run: ./gradlew build -x integrationTest
        env:
          CODEARTIFACT_AUTH_TOKEN: \${{ steps.code-artifact-token.outputs.token }}
          CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL }}
      - - name: Publish package
          run: ./gradlew :sub-project-one:publishAllPublicationsToGithubPackagesRepository
          env:
            GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        - name: Publish package
          run: ./gradlew :sub-project-one:publishAllPublicationsToGithubPackagesRepository
          env:
            GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
  publish-codeArtifact:
    runs-on: ubuntu-latest
    env:
      CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL}}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: temurin
          cache: gradle
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::\${{ secrets.AWS_ACCOUNT_ID }}:role/\${{ secrets.CODE_ARTIFACT_WRITE_ROLE }}
          aws-region: us-east-1
      - name: Generate code artifact token
        id: code-artifact-token
        run: "

          \\   the_secret=$(aws codeartifact get-authorization-token --domain \${{ secrets.CODE_ARTIFACT_DOMAIN }} --domain-owner \${{ secrets.AWS_ACCOUNT_ID }} --region eu-west-1 --query authorizationToken --output text --duration-seconds 900)

          \\   echo \\"::add-mask::$the_secret\\"

          \\   echo \\"token=$the_secret\\" >> \\"$GITHUB_OUTPUT\\"

          \\ "
      - name: Build
        run: ./gradlew build -x integrationTest
        env:
          CODEARTIFACT_AUTH_TOKEN: \${{ steps.code-artifact-token.outputs.token }}
          CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL }}
      - - name: Publish package
          run: ./gradlew :sub-project-one:publishAllPublicationsToCodeArtifactRepository
          env:
            CODEARTIFACT_AUTH_TOKEN: \${{ steps.code-artifact-token.outputs.token }}
        - name: Publish package
          run: ./gradlew :sub-project-one:publishAllPublicationsToCodeArtifactRepository
          env:
            CODEARTIFACT_AUTH_TOKEN: \${{ steps.code-artifact-token.outputs.token }}
",
  "sub-project-one/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.github/workflows/release-sub-project-one.yml
",
  "sub-project-one/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".github/workflows/release-sub-project-one.yml",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  "sub-project-one/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "..",
            "exec": "npx projen default",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "sub-project-two/.github/workflows/release-sub-project-two.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: Java release sub-project-two
on:
  push:
    tags:
      - sub-project-two-*
jobs:
  publish-github:
    runs-on: ubuntu-latest
    env:
      CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL}}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: temurin
          cache: gradle
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::\${{ secrets.AWS_ACCOUNT_ID }}:role/\${{ secrets.CODE_ARTIFACT_READ_ROLE }}
          aws-region: us-east-1
      - name: Generate code artifact token
        id: code-artifact-token
        run: "

          \\   the_secret=$(aws codeartifact get-authorization-token --domain \${{ secrets.CODE_ARTIFACT_DOMAIN }} --domain-owner \${{ secrets.AWS_ACCOUNT_ID }} --region eu-west-1 --query authorizationToken --output text --duration-seconds 900)

          \\   echo \\"::add-mask::$the_secret\\"

          \\   echo \\"token=$the_secret\\" >> \\"$GITHUB_OUTPUT\\"

          \\ "
      - name: Build
        run: ./gradlew build -x integrationTest
        env:
          CODEARTIFACT_AUTH_TOKEN: \${{ steps.code-artifact-token.outputs.token }}
          CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL }}
      - - name: Publish package
          run: ./gradlew :sub-project-two:publishAllPublicationsToGithubPackagesRepository
          env:
            GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        - name: Publish package
          run: ./gradlew :sub-project-two:publishAllPublicationsToGithubPackagesRepository
          env:
            GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
  publish-codeArtifact:
    runs-on: ubuntu-latest
    env:
      CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL}}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: temurin
          cache: gradle
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::\${{ secrets.AWS_ACCOUNT_ID }}:role/\${{ secrets.CODE_ARTIFACT_WRITE_ROLE }}
          aws-region: us-east-1
      - name: Generate code artifact token
        id: code-artifact-token
        run: "

          \\   the_secret=$(aws codeartifact get-authorization-token --domain \${{ secrets.CODE_ARTIFACT_DOMAIN }} --domain-owner \${{ secrets.AWS_ACCOUNT_ID }} --region eu-west-1 --query authorizationToken --output text --duration-seconds 900)

          \\   echo \\"::add-mask::$the_secret\\"

          \\   echo \\"token=$the_secret\\" >> \\"$GITHUB_OUTPUT\\"

          \\ "
      - name: Build
        run: ./gradlew build -x integrationTest
        env:
          CODEARTIFACT_AUTH_TOKEN: \${{ steps.code-artifact-token.outputs.token }}
          CODE_ARTIFACT_URL: \${{ secrets.CODE_ARTIFACT_URL }}
      - - name: Publish package
          run: ./gradlew :sub-project-two:publishAllPublicationsToCodeArtifactRepository
          env:
            CODEARTIFACT_AUTH_TOKEN: \${{ steps.code-artifact-token.outputs.token }}
        - name: Publish package
          run: ./gradlew :sub-project-two:publishAllPublicationsToCodeArtifactRepository
          env:
            CODEARTIFACT_AUTH_TOKEN: \${{ steps.code-artifact-token.outputs.token }}
",
  "sub-project-two/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.github/workflows/release-sub-project-two.yml
",
  "sub-project-two/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".github/workflows/release-sub-project-two.yml",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  "sub-project-two/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "..",
            "exec": "npx projen default",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
}
`;
